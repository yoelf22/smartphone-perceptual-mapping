#!/usr/bin/env python3
"""
Run All - Complete Perceptual Mapping Pipeline
==============================================

Executes the complete smartphone perceptual mapping pipeline:
1. Generate qualitative dataset from user interviews
2. Create quantitative assessment system with 200 respondents
3. Run advanced perceptual mapping analysis
4. Generate all dimension combinations

Usage:
    python run_all.py

This script will generate all CSV files and run sample analyses.
"""

import subprocess
import sys
import os
from datetime import datetime

def run_script(script_name, description):
    """Run a Python script and handle errors."""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    
    try:
        # Run the script
        result = subprocess.run([sys.executable, script_name], 
                              capture_output=True, text=True, check=True)
        
        # Print output
        if result.stdout:
            print(result.stdout)
        
        print(f"‚úÖ {description} completed successfully!")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error running {script_name}:")
        print(f"Exit code: {e.returncode}")
        if e.stdout:
            print(f"STDOUT:\n{e.stdout}")
        if e.stderr:
            print(f"STDERR:\n{e.stderr}")
        return False
    
    except FileNotFoundError:
        print(f"‚ùå Script {script_name} not found!")
        print(f"Make sure all Python files are in the same directory.")
        return False

def check_requirements():
    """Check if required packages are installed."""
    print("üîç Checking requirements...")
    
    required_packages = [
        'pandas', 'numpy', 'matplotlib', 'seaborn', 'scipy'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"  ‚úÖ {package}")
        except ImportError:
            print(f"  ‚ùå {package} - MISSING")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  Missing packages detected!")
        print(f"Install with: pip install {' '.join(missing_packages)}")
        print(f"Or run: pip install -r requirements.txt")
        
        choice = input("\nContinue anyway? (y/n): ").lower().strip()
        return choice == 'y'
    
    print(f"‚úÖ All requirements satisfied!")
    return True

def list_generated_files():
    """List all files generated by the pipeline."""
    generated_files = [
        'qualitative_user_interviews.csv',
        'respondent_profiles.csv', 
        'quantitative_brand_ratings.csv',
        'average_brand_ratings.csv',
        'perceptual_map_combinations.csv'
    ]
    
    print(f"\nüìÅ Generated Files:")
    total_size = 0
    
    for filename in generated_files:
        if os.path.exists(filename):
            size = os.path.getsize(filename)
            total_size += size
            size_mb = size / (1024 * 1024)
            print(f"  ‚úÖ {filename:<35} ({size_mb:.2f} MB)")
        else:
            print(f"  ‚ùå {filename:<35} (Not found)")
    
    print(f"\nTotal size: {total_size / (1024 * 1024):.2f} MB")

def main():
    """Main execution function."""
    print("üéØ Smartphone Perceptual Mapping - Complete Pipeline")
    print("=" * 70)
    print(f"Started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Check requirements
    if not check_requirements():
        print("\n‚ùå Exiting due to missing requirements.")
        return
    
    # Pipeline execution
    pipeline_steps = [
        ('qualitative_dataset_generator.py', 'Qualitative Dataset Generation'),
        ('quantitative_assessment_system.py', 'Quantitative Assessment System'),
        ('perceptual_map_analyzer.py', 'Perceptual Map Analysis')
    ]
    
    results = []
    
    for script_name, description in pipeline_steps:
        success = run_script(script_name, description)
        results.append((script_name, success))
        
        if not success:
            print(f"\n‚ö†Ô∏è  Pipeline interrupted at {script_name}")
            choice = input("Continue with next step? (y/n): ").lower().strip()
            if choice != 'y':
                break
    
    # Final summary
    print(f"\n{'='*70}")
    print(f"üìä PIPELINE EXECUTION SUMMARY")
    print(f"{'='*70}")
    
    for script_name, success in results:
        status = "‚úÖ SUCCESS" if success else "‚ùå FAILED"
        print(f"  {script_name:<40} {status}")
    
    # List generated files
    list_generated_files()
    
    # Success check
    successful_steps = sum(1 for _, success in results if success)
    total_steps = len(results)
    
    if successful_steps == total_steps:
        print(f"\nüéâ COMPLETE SUCCESS!")
        print(f"All {total_steps} pipeline steps completed successfully.")
        print(f"\nüéØ Next Steps:")
        print(f"  ‚Ä¢ Open perceptual_mapping_dashboard.html in web browser")
        print(f"  ‚Ä¢ Import CSV files into Excel/Tableau for custom analysis")
        print(f"  ‚Ä¢ Run individual Python scripts for specific analyses")
        print(f"  ‚Ä¢ Use perceptual_map_analyzer.py for advanced visualizations")
        
    else:
        print(f"\n‚ö†Ô∏è  PARTIAL SUCCESS")
        print(f"Completed {successful_steps}/{total_steps} steps successfully.")
        print(f"Check error messages above for troubleshooting.")
    
    print(f"\nFinished at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üéØ Smartphone perceptual mapping pipeline complete!")

if __name__ == "__main__":
    main()
